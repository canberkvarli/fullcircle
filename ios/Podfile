require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'

podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# Override BoringSSL podspec to remove problematic flags
pre_install do |installer|
  installer.pod_targets.each do |pod|
    if pod.name == 'BoringSSL-GRPC'
      puts "ðŸ”§ Patching BoringSSL-GRPC to remove -G flag"
    end
  end
end

target 'FullCircleDev' do
  use_expo_modules!
  use_frameworks! :linkage => :static
  use_modular_headers!

  # Important: Set this BEFORE use_native_modules!
  $RNFirebaseAsStaticFramework = true

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Fix ReactCodegen script phase
    installer.pods_project.targets.each do |target|
      if target.name == 'ReactCodegen'
        target.shell_script_build_phases.each do |build_phase|
          if build_phase.name.include?('Generate Specs')
            build_phase.output_paths = ['$(DERIVED_FILE_DIR)/react-codegen.log']
          end
        end
      end

      # Comprehensive fix for BoringSSL-GRPC and gRPC-Core Xcode 16 compatibility
      if target.name == 'BoringSSL-GRPC' || target.name.start_with?('gRPC')
        # Remove problematic compiler flags from source files
        target.source_build_phase.files.each do |file|
          if file.settings && file.settings['COMPILER_FLAGS']
            flags = file.settings['COMPILER_FLAGS'].split
            flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' || flag == '-G' }
            file.settings['COMPILER_FLAGS'] = flags.join(' ')
          end
        end
        
        # Fix build settings
        target.build_configurations.each do |config|
          # Remove -G flag from all possible locations
          ['OTHER_CFLAGS', 'OTHER_CPLUSPLUSFLAGS', 'WARNING_CFLAGS', 'GCC_WARN_INHIBIT_ALL_WARNINGS'].each do |setting|
            if config.build_settings[setting]
              if config.build_settings[setting].is_a?(Array)
                config.build_settings[setting] = config.build_settings[setting].reject { |flag| flag == '-G' || flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
              elsif config.build_settings[setting].is_a?(String)
                config.build_settings[setting] = config.build_settings[setting].gsub(/\s*-G\s*/, ' ').gsub(/\s*-GCC_WARN_INHIBIT_ALL_WARNINGS\s*/, ' ').strip
              end
            end
          end
          
          # Set safe compiler settings
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'NO'
          config.build_settings['CLANG_WARN_EVERYTHING'] = 'NO'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GRPC_ARES=0'
          
          # Force C++17 for compatibility
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        end
      end

      # Fix Hermes engine issues - but keep it enabled for headers
      if target.name == 'hermes-engine'
        target.build_configurations.each do |config|
          # Don't exclude Hermes entirely, just fix build issues
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
          config.build_settings['VALID_ARCHS'] = 'arm64'
        end
      end 

      target.build_configurations.each do |config|
        config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
        
        # Fix for Xcode 15.2+ compatibility
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        
        # Fix for gRPC-Core C++20 compatibility issues - force C++17
        if target.name.start_with?('gRPC') || target.name == 'BoringSSL-GRPC'
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        end
        
        # Remove any Flipper references (not compatible with use_frameworks)
        if target.name.include?('Flipper')
          target.remove_from_project
        end
      end
    end

    # Fix the specific gRPC template argument issue in BOTH gRPC-Core AND gRPC-C++
    grpc_core_basic_seq_file = File.join(installer.sandbox.root, 'gRPC-Core/src/core/lib/promise/detail/basic_seq.h')
    grpc_cpp_basic_seq_file = File.join(installer.sandbox.root, 'gRPC-C++/src/core/lib/promise/detail/basic_seq.h')
    
    [grpc_core_basic_seq_file, grpc_cpp_basic_seq_file].each do |file_path|
      if File.exist?(file_path)
        puts "Fixing gRPC template argument issue in #{File.basename(File.dirname(file_path))}/basic_seq.h"
        file_content = File.read(file_path)
        if file_content.include?('Traits::template CallSeqFactory(f_, *cur_, std::move(arg))')
          file_content.gsub!(
            'Traits::template CallSeqFactory(f_, *cur_, std::move(arg))',
            'Traits::template CallSeqFactory<>(f_, *cur_, std::move(arg))'
          )
          File.write(file_path, file_content)
          puts "Successfully patched #{file_path}"
        else
          puts "Pattern not found in #{file_path} - may already be fixed"
        end
      else
        puts "File not found: #{file_path}"
      end
    end

    # Fix BoringSSL-GRPC -G flag issue by patching the build files
    boring_ssl_path = File.join(installer.sandbox.root, 'BoringSSL-GRPC')
    if Dir.exist?(boring_ssl_path)
      puts "Fixing BoringSSL-GRPC -G flag issue..."
      
      # Find and patch .xcconfig files
      Dir.glob("#{boring_ssl_path}/**/*.xcconfig").each do |config_file|
        if File.exist?(config_file)
          content = File.read(config_file)
          if content.include?('-G')
            puts "Removing -G flag from #{config_file}"
            content.gsub!(/-G\s*/, '')
            File.write(config_file, content)
          end
        end
      end

      # Find and patch any Makefile or build scripts
      ['Makefile', 'CMakeLists.txt', 'BUILD', 'BUILD.bazel'].each do |build_file|
        build_file_path = File.join(boring_ssl_path, build_file)
        if File.exist?(build_file_path)
          content = File.read(build_file_path)
          if content.include?('-G')
            puts "Removing -G flag from #{build_file_path}"
            content.gsub!(/-G\s*/, '')
            File.write(build_file_path, content)
          end
        end
      end
    end
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end